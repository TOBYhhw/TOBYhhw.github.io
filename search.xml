<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二次封装axios？有手就行</title>
      <link href="posts/15351b7e.html"/>
      <url>posts/15351b7e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>Axios相信对前端熟悉的同学对它不会感到陌生了，这简直就是前端近年来的一大杀器，<br>官方推荐使用axios来进行网络请求，后面基本大部分项目都能瞧见它的身影。虽然axios很强，<br>但是单纯的axios并不能满足我们日常的使用,因此很多时候我们都需要对axios进行二次封装，<br>接下来我们就来详细讨论讨论。</p></blockquote><h1 id="为什么要二次封装axios"><a href="#为什么要二次封装axios" class="headerlink" title="为什么要二次封装axios"></a>为什么要二次封装axios</h1><blockquote><p>通常我们的项目会越做越大,页面也会越来越多,如果页面非常的少,直接用axios也没有什么大的影响,<br>那页面组件多了起来,上百个接口呢,这个时候后端改了接口,多加了一个参数什么的呢?那就只有找到那个页面,<br>进去修改.整个过程很繁琐不易于项目的维护和迭代.<br>这个时候如果我们统一的区管理接口,需要修改某一个接口的时候直接在api里修改对应的请求是不是很方便呢?<br>总结：api统一管理,不管接口有多少,所有的接口都可以非常清晰,容易维护.</p></blockquote><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><pre class="line-numbers language-none"><code class="language-none">yarn create vite<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里我们使用vite来初始化一个Vue项目</p><h2 id="下载axios"><a href="#下载axios" class="headerlink" title="下载axios"></a>下载axios</h2><pre class="line-numbers language-none"><code class="language-none">yarn add axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="独立管理api接口"><a href="#独立管理api接口" class="headerlink" title="独立管理api接口"></a>独立管理api接口</h2><p>以图灵官网的接口为例<br>我们在项目中创建 <code>api</code>文件夹用来管理所有的API，创建<code>axios.js</code> 文件二次封装axios.</p><pre class="line-numbers language-none"><code class="language-none">//axios.jsimport axios from "axios";function myAxios(axiosConfig) {    const service = axios.create({        baseURL: "https://www.turingteam.me:8081", // 设置统一的请求前缀        timeout: 10000 // 设置统一的超时时长    });    return service(axiosConfig);}export default myAxios<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>service(axiosConfig)</code>返回的是一个Promise对象</p><h2 id="编写不同功能的api"><a href="#编写不同功能的api" class="headerlink" title="编写不同功能的api"></a>编写不同功能的api</h2><p>如所有成员相关的API就放在 <code>member.js</code> 文件中，所有项目相关的API就放在 <code>project.js </code>中，<br>这样子就很有条理性。<br>下面我们来 <code>project.js</code> 中编写获取项目列表的API。</p><pre class="line-numbers language-none"><code class="language-none">//project.jsimport myAxios from "../axios";//团队项目查询export function queryProjectAPI(offset, page) {    return myAxios({        url: "/guest/project/queryProject",        method: 'get',        params: {            offset,            page        }    })}//通过id查询团队项目详细信息export function queryProjectByIdAPI(id) {    return myAxios({        url: "/guest/project/queryProjectById",        method: 'get',        params: {            id        }    })}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在页面中具体使用"><a href="#在页面中具体使用" class="headerlink" title="在页面中具体使用"></a>在页面中具体使用</h2><p>在 App.vue 文件中随便加一个按钮，点击触发请求。</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;button @click="getList"&gt;点击&lt;/button&gt;&lt;/template&gt;&lt;script lang='js'&gt;import {defineComponent} from 'vue'import {queryProjectAPI} from '@/api/project.js';export default defineComponent({  setup() {    const getList = async () =&gt; {     try{        let res = await queryProjectAPI(offset, page)        console.log(res);     }catch(error){        console.log(error);     }    }    return {      getList    }  }})&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此，我们就封装了一个最简单的axios，我们每次新增加一个 API，只需要找到对应模块的 API 文件去添加即可，然后再到具体页面导入使用</p><h2 id="POST请求参数序列化"><a href="#POST请求参数序列化" class="headerlink" title="POST请求参数序列化"></a>POST请求参数序列化</h2><p>在POST请求中的 <code>Content-Type</code> 常见的有以下3种形式：</p><pre class="line-numbers language-none"><code class="language-none">Content-Type: application/jsonContent-Type: application/x-www-form-urlencodedContent-Type: multipart/form-data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在主流基本在用application/json形式，Axios默认以这种形式工作，我们给后端接口传递参数也简单，直接丢在其data参数就行了。<br>我们在 <code>resume.js </code>文件中编写简历API</p><pre class="line-numbers language-none"><code class="language-none">import myAxios from "../axios";//创新组内容填写export function resumeInnovateAddAPI(data) {    return myAxios({        url: "/guest/resume/resumeInnovateAdd",        method: 'post',        data: data,  });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是有时候后端要求Content-Type必须以application/x-www-form-urlencoded形式，那么通过上面传递的参数，后端是收不到的，我们必须对参数数据进行所谓的序列化处理才行，让它以普通表单形式(键值对)发送到后端，而不是json形式</p><pre class="line-numbers language-none"><code class="language-none">import myAxios from "../axios";//创新组内容填写export function resumeInnovateAddAPI(data) {    return myAxios({        url: "/guest/resume/resumeInnovateAdd",        method: 'post',        data: data,        headers: {      'Content-Type': 'application/x-www-form-urlencoded'    },    transformRequest: [      (data) =&gt; {        let result = ''        for (let key in data) {          result += encodeURIComponent(key) + '=' + encodeURIComponent(data[key]) + '&amp;'        }        return result.slice(0, result.length - 1)      }    ],}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我通过 headers 来指定Content-Type的形式，对于 transformRequest 就是允许在向服务器发送前，修改请求数据，但只能用在 ‘PUT’，’POST’ 和 ‘PATCH’ 这几个请求方法，且后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream，更多的还有 transformResponse 能在传递给 then/catch 前，允许修改响应数据，其余更多参数的可以去 <a href="https://www.npmjs.com/package/axios">Axios文档</a>查看。</p><h2 id="请求拦截器-amp-响应拦截器"><a href="#请求拦截器-amp-响应拦截器" class="headerlink" title="请求拦截器&amp;响应拦截器"></a>请求拦截器&amp;响应拦截器</h2><h3 id="1-请求拦截器"><a href="#1-请求拦截器" class="headerlink" title="1 请求拦截器"></a>1 请求拦截器</h3><p>在请求发送前进行必要操作处理，例如添加统一cookie、请求体加验证、设置请求头等，相当于是对每个接口里相同操作的一个封装；</p><pre class="line-numbers language-none"><code class="language-none">service.interceptors.request.use(function (config) {    // 在发送请求之前做些什么，例如加入token    .......    return config;  }, function (error) {    // 对请求错误做些什么    return Promise.reject(error);  });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-响应拦截器"><a href="#2-响应拦截器" class="headerlink" title="2 响应拦截器"></a>2 响应拦截器</h3><p>同理，响应拦截器也是如此功能，只是在请求得到响应之后，对响应体的一些处理，通常是数据统一处理等，也常来判断登录失效等。</p><pre class="line-numbers language-none"><code class="language-none">service.interceptors.response.use(function (response) {    // 在接收响应做些什么    ......    return response;  }, function (error) {    // 对响应错误做点什么    return Promise.reject(error);  });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 技术 </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用yarn的一些问题</title>
      <link href="posts/aadf0f9b.html"/>
      <url>posts/aadf0f9b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="项目场景"><a href="#项目场景" class="headerlink" title="项目场景"></a>项目场景</h1><p>最近我在使用yarn的时候出现下面这种提示的频率越来越高了：<br>例如：info There appears to be trouble with your network connection. Retrying…</p><hr><h1 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h1><p>info There appears to be trouble with your network connection. Retrying…<br>信息:网络连接似乎出了点问题,请重试… 但我仔细检查下来,自己的网络似乎并没有什么问题,<br>网络一切正常,问题就很可能出现在了代理连接上。</p><hr><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>更换安装依赖的镜像,使用淘宝镜像安装,代码如下:</p><h2 id="1、安装好后更换淘宝镜像"><a href="#1、安装好后更换淘宝镜像" class="headerlink" title="1、安装好后更换淘宝镜像"></a>1、安装好后更换淘宝镜像</h2><pre class="line-numbers language-none"><code class="language-none">yarn config set registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2、移除原代理"><a href="#2、移除原代理" class="headerlink" title="2、移除原代理"></a>2、移除原代理</h2><pre class="line-numbers language-none"><code class="language-none">yarn config delete proxynpm config rm proxynpm config rm https-proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3、安装cnpm镜像并使用代理registry"><a href="#3、安装cnpm镜像并使用代理registry" class="headerlink" title="3、安装cnpm镜像并使用代理registry"></a>3、安装cnpm镜像并使用代理registry</h2><pre class="line-numbers language-none"><code class="language-none">npm install -g cnpm --registry=https://registry.npm.taobao.orgnpm config set registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><p>这样问题就解决了</p>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> yarn </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习路线</title>
      <link href="posts/e5cf9037.html"/>
      <url>posts/e5cf9037.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一年前的自己刚刚度过了高考难关，满心欢喜（bushi）的踏入了大学，<br>在师兄师姐的介绍下，懵懵懂懂的选择了前端这个方向，经过一年的摸索<br>也算是入了前端的门。下面就总结一下个人的前端学习路线</p><blockquote><p>这份学习路线并不完美，也不会有最终形态，正如前端不可预见、永无止境的未来。<br>仅供参考，此路线仅供零基础想入门的前端的同学，以及我的师弟师妹们有个参考。<br>等你入门了之后，对前端有个大概了解就知道以后深入需要学习什么了。</p></blockquote><hr><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p><strong>工欲善其事，必先利其器。</strong></p><p><strong>浏览器：</strong></p><ul><li>Chrome （极力推荐！！！）</li><li>Edge   （推荐学习）</li></ul><p><strong>编辑器：</strong></p><ul><li>VSCode （优先推荐这个！！）</li><li>WebStorm  （不喜欢他的风格）</li><li>HBuilder X （用来写uniapp和小程序的）</li><li>在线 IDE  （额。。。）</li><li><del>记事本</del></li></ul><p><strong>文档笔记</strong></p><ul><li>Markdown 语法</li><li>Typora</li></ul><hr><h2 id="前端入门基础知识"><a href="#前端入门基础知识" class="headerlink" title="前端入门基础知识"></a>前端入门基础知识</h2><p><strong>tip：建议从实战开始，边学边练，培养兴趣，快速入门。</strong></p><p><strong>前端三剑客：HTML  CSS  JavaScript</strong></p><blockquote><p>俗话说：基础不牢，地动山摇。基础的重要性不需要我多讲了吧。<br>HTML  CSS  JavaScript 作为前端最基础，同时我认为也是最重要的。<br>这一阶段的学习一定要慢而细，最重要的是一定要动手敲代码！动手敲代码！动手敲代码！<br>重要的事情说三次，不要只是跟着视频看而不去自己动手操作，很多东西你只有上手过后才能<br>有更深的理解，看十遍百遍不然自己动手敲一遍。</p></blockquote><h4 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h4><p><strong>HTML + CSS</strong></p><ul><li>小破站黑马pink老师： <a href="https://www.bilibili.com/video/BV14J4114768">https://www.bilibili.com/video/BV14J4114768</a></li></ul><p><strong>JavaScript</strong></p><ul><li>同样是小破站pink老师：<a href="https://www.bilibili.com/video/BV1Sy4y1C7ha/">https://www.bilibili.com/video/BV1Sy4y1C7ha</a></li><li>或者是李立超老师(js核心基础)：<a href="https://www.bilibili.com/video/BV1mG411h7aD">https://www.bilibili.com/video/BV1mG411h7aD</a></li></ul><hr><h2 id="进阶学习"><a href="#进阶学习" class="headerlink" title="进阶学习"></a>进阶学习</h2><blockquote><p>到了这里，恭喜你！你已经能用前端三剑客写一些静态的网页了。<br>下面我们继续学习！<br>当然如果你有更适合自己的学习方法，可自行学习。</p></blockquote><p><strong>交互和JS高级知识</strong></p><ul><li>AJAX：<a href="https://www.bilibili.com/video/BV1WC4y1b78y">https://www.bilibili.com/video/BV1WC4y1b78y</a></li><li>ES6: <a href="https://www.bilibili.com/video/BV1uK411H7on">https://www.bilibili.com/video/BV1uK411H7on</a></li><li>Promise: <a href="https://www.bilibili.com/video/BV1GA411x7z1">https://www.bilibili.com/video/BV1GA411x7z1</a></li><li>Axios: <a href="https://www.bilibili.com/video/BV1wr4y1K7tq"> https://www.bilibili.com/video/BV1wr4y1K7tq</a></li></ul><p><strong>团队协作 代码托管</strong></p><blockquote><p>集中存储、备份你的代码，还能和团队成员协作开发。</p></blockquote><ul><li>Git / Github: <a href="https://www.bilibili.com/video/BV1FE411P7B3">https://www.bilibili.com/video/BV1FE411P7B3</a></li><li>Gitee (不推荐使用，知道就好)</li><li>GitLab (目前不需要，知道有这么个东西就好)</li></ul><p><strong>Node Js</strong></p><blockquote><p>一个开源与跨平台的 JavaScript 运行时环境。它是一个可用于几乎任何项目的流行工具！</p></blockquote><ul><li>Node js: <a href="https://www.bilibili.com/video/BV1a34y167AZ">https://www.bilibili.com/video/BV1a34y167AZ</a></li></ul><p><strong>包管理</strong></p><blockquote><p>用于安装 Node.js 的扩展、工具等。</p></blockquote><ul><li>npm</li><li>yarn</li><li>npx</li></ul><p><strong>数据库</strong></p><ul><li>MySQL: <a href="https://www.bilibili.com/video/BV1Vy4y1z7EX">https://www.bilibili.com/video/BV1Vy4y1z7EX</a></li><li>MongoDB: <a href="https://www.bilibili.com/video/BV18s411E78K"> https://www.bilibili.com/video/BV18s411E78K</a></li></ul><hr><h2 id="前端框架和小程序"><a href="#前端框架和小程序" class="headerlink" title="前端框架和小程序"></a>前端框架和小程序</h2><blockquote><p>到了这里相信你的基础y已经比较扎实了，开始框架的学习。</p></blockquote><p><strong>优先学习Vue，然后是React，小程序后面根据自己需要学</strong></p><ul><li>Vue:<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH"> https://www.bilibili.com/video/BV1Zy4y1K7SH</a></li><li>React:<a href="https://www.bilibili.com/video/BV1wy4y1D7JT"> https://www.bilibili.com/video/BV1wy4y1D7JT</a></li><li>TypeScript（建议学）:<a href="https://www.bilibili.com/video/BV1Xy4y1v7S2">https://www.bilibili.com/video/BV1Xy4y1v7S2</a></li><li>小程序：<a href="https://www.bilibili.com/video/BV1nE41117BQ">https://www.bilibili.com/video/BV1nE41117BQ</a></li></ul><hr><h2 id="后语"><a href="#后语" class="headerlink" title="后语"></a>后语</h2><blockquote><p>以上就是我大一到大二一年时间的学习路线，如果你是刚入门的小白，<br>不知道从哪里学起,可以参考我的学习路线,当然可能不适合所有人。<br>根据自己的需求学习。当然，我们前端的学习才刚刚开始，一入前端深似海，后面就要靠你们自己努力了。<br>一起加油把！！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 技术 </tag>
            
            <tag> 学习路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建了自己的Hexo博客</title>
      <link href="posts/19d2a4e6.html"/>
      <url>posts/19d2a4e6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>一直都想拥有自己的一个博客，今日愿望实现了</p></blockquote><hr><p>  <br>此博客用于个人的学习记录,单纯用来做笔记，顺便用来分享一下，<br>就这样，记录下开博客的第一天</p>]]></content>
      
      
      <categories>
          
          <category> 博客篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
